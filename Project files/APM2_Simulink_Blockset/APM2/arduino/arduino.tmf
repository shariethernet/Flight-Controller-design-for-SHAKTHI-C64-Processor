# Embedded Coder Template Makefile
#
# - You can use this template makefile as the basis for your own 
#   custom target including support for Processor-in-the-Loop (PIL).
# - The intent is that you should not have to modify this example
#   template makefile to create your own PIL implementation.
# - The embedded tooling information is abstracted into a separate
#   file, target_tools.mk.
# - To create a custom target for your own processor, you will
#   need to modify the target_tools.mk to specify the appropriate
#   embedded tools and options. 
#
# Copyright 2009-2011 The MathWorks, Inc.

#------------------------ Macros read by make_rtw ------------------------------
MAKECMD         = "|>MATLAB_BIN<|/|>ARCH<|/gmake"
HOST                = ANY
BUILD               = yes
SYS_TARGET_FILE     = any
COMPILER_TOOL_CHAIN = default
MAKEFILE_FILESEP = /
#---------------------- Tokens expanded by make_rtw ----------------------------
MODEL                   = |>MODEL_NAME<|
MODULES                 = |>MODEL_MODULES<|
MAKEFILE                = |>MAKEFILE_NAME<|
MATLAB_ROOT             = |>MATLAB_ROOT<|
ALT_MATLAB_ROOT         = |>ALT_MATLAB_ROOT<|
MASTER_ANCHOR_DIR       = |>MASTER_ANCHOR_DIR<|
START_DIR               = |>START_DIR<|
S_FUNCTIONS             = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB         = |>S_FUNCTIONS_LIB<|
NUMST                   = |>NUMST<|
NCSTATES                = |>NCSTATES<|
COMPUTER                = |>COMPUTER<|
BUILDARGS               = |>BUILDARGS<|
MULTITASKING            = |>MULTITASKING<|
INTEGER_CODE            = |>INTEGER_CODE<|
MAT_FILE                = |>MAT_FILE<|
ONESTEPFCN              = |>COMBINE_OUTPUT_UPDATE_FCNS<|
TERMFCN                 = |>INCLUDE_MDL_TERMINATE_FCN<|
B_ERTSFCN               = |>GENERATE_ERT_S_FUNCTION<|
MEXEXT                  = |>MEXEXT<|
EXT_MODE                = |>EXT_MODE<|
TMW_EXTMODE_TESTING     = |>TMW_EXTMODE_TESTING<|
EXTMODE_TRANSPORT       = |>EXTMODE_TRANSPORT<|
EXTMODE_STATIC          = |>EXTMODE_STATIC_ALLOC<|
EXTMODE_STATIC_SIZE     = |>EXTMODE_STATIC_ALLOC_SIZE<|
MULTI_INSTANCE_CODE     = |>MULTI_INSTANCE_CODE<|
TGT_FCN_LIB             = |>TGT_FCN_LIB<|
MODELREFS               = |>MODELREFS<|
SHARED_SRC              = |>SHARED_SRC<|
SHARED_SRC_DIR          = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR          = |>SHARED_BIN_DIR<|
SHARED_LIB              = |>SHARED_LIB<|
GEN_SAMPLE_MAIN         = |>GEN_SAMPLE_MAIN<|
TARGET_LANG_EXT         = |>TARGET_LANG_EXT<|
PORTABLE_WORDSIZES      = |>PORTABLE_WORDSIZES<|
SHRLIBTARGET            = |>SHRLIBTARGET<|
OPTIMIZATION_FLAGS      = |>OPTIMIZATION_FLAGS<|
ADDITIONAL_LDFLAGS      = |>ADDITIONAL_LDFLAGS<|
MAKEFILEBUILDER_TGT     = |>MAKEFILEBUILDER_TGT<|
STANDALONE_SUPPRESS_EXE = |>STANDALONE_SUPPRESS_EXE<|

#--------------------------- Model and reference models -----------------------
MODELLIB                  = |>MODELLIB<|
MODELREF_LINK_LIBS        = |>MODELREF_LINK_LIBS<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<|-I|>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<|
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
MODELREF_TARGET_TYPE      = |>MODELREF_TARGET_TYPE<|

#-- In the case when directory name contains space ---
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT := $(ALT_MATLAB_ROOT)
endif

#------------------ Include a tool specification settings ----------------- 
# TARGET_INCS - include options for the target source files (e.g. -I$(TARGET_INC_DIR))
# TARGET_SRCS - a list of the target source files 
# CC - C compiler command
# CFLAGS - C compiler options
# CDEBUG - C compiler debug option
# CCOUTPUTFLAG - C compiler output option (e.g. -o)
# OBJ_EXT - object file extension
# CXX - C++ compiler command
# CXXFLAGS - C++ compiler options
# CXXDEBUG - C++ compiler debug option
# LD - linker command
# LDFLAGS - linker options
# LDDEBUG - linker debug option
# LDOUTPUTFLAG - linker output option (e.g. -o)
# PROGRAM_FILE_EXT - linker output file extension (e.g .elf)
# AR - Archiver command
# ARFLAGS - Archiver options
# OBJCOPY - Binary file format converter command
# OBJCOPYFLAGS - Binary file format converter options
# BINARY_FILE_EXT - Binary file extension (e.g. .hex or .mot)
# EXE_FILE_EXT = $(BINARY_FILE_EXT) or $(PROGRAM_FILE_EXT) - build product ext.

include $(START_DIR)/slprj/target_tools.mk

#------------------------------ Includes -------------------------------------
# Place -I options here
MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/rtw/c/ert \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/rtw/c/src \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/common

# Additional includes 
ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<| \
-I/usr/share/arduino/hardware/arduino/variants/mega/

SHARED_INCLUDES =
ifneq ($(SHARED_SRC_DIR),)
SHARED_INCLUDES = -I$(SHARED_SRC_DIR) 
endif

INCLUDES = -I. -I$(RELATIVE_PATH_TO_ANCHOR) $(MATLAB_INCLUDES) \
           $(ADD_INCLUDES) $(MODELREF_INC_PATH) $(SHARED_INCLUDES) \
           $(TARGET_INCS)

# INCLUDES += -IC:\MATLAB/Targets/R2012a/arduino-1.0/hardware/arduino/variants/standard
# INCLUDES += -IC:\MATLAB/Targets/R2012a/arduino-1.0/hardware/arduino/variants/mega

# Added flag to allow SIL mode and not include Arduino board specific code
#OPTS=-DARDUINOTARGET=1 -DAPM_HARDWARE_APM2 2 -DCONFIG_APM_HARDWARE APM_HARDWARE_APM2
OPTS=-DARDUINOTARGET=1 -DARDUINO=100
CFLAGS += $(OPTS) 
CXXFLAGS += $(OPTS) 

CFLAGS += $(INCLUDES)
CXXFLAGS += $(INCLUDES)

ifeq ($(DEBUG_BUILD),1)
# Set flags for debugging
CFLAGS += $(CDEBUG) 
CXXFLAGS += $(CXXDEBUG) 
LDFLAGS += $(LDDEBUG)
endif
#-------------------------------- Target application --------------------------------------
# Define the type of build


ifeq ($(MODELREF_TARGET_TYPE), NONE)	
ifeq ($(MAKEFILEBUILDER_TGT), 0)
ifeq ($(STANDALONE_SUPPRESS_EXE), 1)
# Build object code only for top level model (preliminary step for building
# PIL application)
BUILD_MODE=pil_prebuild
PRODUCT=ObjectModules
BUILD_PRODUCT_TYPE = object modules
else
# Building executable for real-time deployment
BUILD_MODE=real_time
PRODUCT = $(MODEL)$(EXE_FILE_EXT)
BUILD_PRODUCT_TYPE = executable
endif
else
# Building executable for deployment as PIL application (non-real-time 
# simulation)
BUILD_MODE=pil_application
PRODUCT = $(MODEL)$(EXE_FILE_EXT)
BUILD_PRODUCT_TYPE = executable
endif
else
# Building a library for a referenced model
BUILD_MODE = model_reference
PRODUCT = $(MODELLIB)
BUILD_PRODUCT_TYPE = library
endif

#-------------- Source Files, Object Files and Dependency Files -----------

SRCS = $(ADD_SRCS) $(S_FUNCTIONS)

ifeq ($(BUILD_MODE), pil_prebuild)
  SRCS += $(MODULES) $(MODEL).$(TARGET_LANG_EXT) $(EXT_SRC)
endif

ifeq ($(BUILD_MODE), pil_application)
  SRCS += $(TARGET_SRCS)
  PREBUILT_SRCS      = $(MODULES)
  PREBUILT_OBJS      = $(addsuffix $(OBJ_EXT), $(basename $(PREBUILT_SRCS)))
endif

ifeq ($(BUILD_MODE), real_time)
  SRCS += $(MODULES) $(MODEL).$(TARGET_LANG_EXT) $(EXT_SRC) ert_main.c
#  SRCS += $(MODULES) $(MODEL).$(TARGET_LANG_EXT) $(EXT_SRC) ert_main.cpp
  SRCS += $(TARGET_SRCS) 
endif

ifeq ($(BUILD_MODE), model_reference)
  SRCS += $(MODULES)
endif

USER_SRCS =

USER_OBJS       = $(addsuffix $(OBJ_EXT), $(basename $(USER_SRCS)))
LOCAL_USER_OBJS = $(notdir $(USER_OBJS))

OBJS      = $(addsuffix $(OBJ_EXT), $(basename $(SRCS))) $(USER_OBJS)
LINK_OBJS = $(addsuffix $(OBJ_EXT), $(basename $(SRCS))) $(LOCAL_USER_OBJS) $(PREBUILT_OBJS)

LIBS = $(S_FUNCTIONS_LIB)

SHARED_SRC := $(wildcard $(SHARED_SRC))
SHARED_OBJS = $(addsuffix $(OBJ_EXT), $(basename $(SHARED_SRC)))

#-------------- Default target -----------
TARGETS = $(PRODUCT)

all: $(TARGETS)

# Need a rule to generate the build success string if product was already up to date
.PHONY : all
all : $(PRODUCT)
	@echo "### Created $(PRODUCT) successfully (or it was already up to date)"

#----------------------------- Dependencies ------------------------------------

$(OBJS) : $(MAKEFILE) rtw_proj.tmw

$(SHARED_LIB) : $(SHARED_OBJS)
	@echo "### Creating $@ "
	$(AR) $(ARFLAGS) $@ $(SHARED_OBJS)
	@echo "### $@ Created "

##-------------------------- Support for building modules ----------------------
ifeq ($(BUILD_MODE), pil_prebuild)
$(PRODUCT) : $(OBJS) $(SHARED_LIB)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	@echo "### Created $(PRODUCT)"
endif

ifeq ($(BUILD_MODE), real_time)
$(PRODUCT) : $(MODEL)$(PROGRAM_FILE_EXT)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(OBJCOPY) $(OBJCOPYFLAGS) $< $@
	@echo "### Generated $(PRODUCT)"
endif

ifeq ($(BUILD_MODE), pil_application)
$(PRODUCT) : $(MODEL)$(PROGRAM_FILE_EXT)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(OBJCOPY) $(OBJCOPYFLAGS) $< $@
	@echo "### Generated $(PRODUCT)"
endif

ifeq ($(BUILD_MODE), model_reference)
$(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) 
	@echo "### BUILD_MODE $(BUILD_MODE)"
	@echo "### Linking ..."
	$(AR) $(ARFLAGS) $@ $(OBJS)
	@echo "### Generated $@"
endif

ifeq ($(BUILD_MODE), pil_application)
$(MODEL)$(PROGRAM_FILE_EXT): $(PREBUILT_OBJS) $(OBJS) $(MODELLIB) $(MODELREF_LINK_LIBS) $(SHARED_LIB) $(LIBS)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(LD) $^ $(LDFLAGS) $(LDOUTPUTFLAG) $@ 
	@echo "### Generated $@"
endif

ifeq ($(BUILD_MODE), real_time)
$(MODEL)$(PROGRAM_FILE_EXT): $(OBJS) $(MODELREF_LINK_LIBS) $(SHARED_LIB) $(LIBS)
	@echo "### BUILD_MODE $(BUILD_MODE)"
	$(LD) $^ $(LDFLAGS) $(LDOUTPUTFLAG) $@ 
	@echo "### Generated $@"
endif

%$(OBJ_EXT) : $(RELATIVE_PATH_TO_ANCHOR)/%.c
	$(CC) -c $(CFLAGS) $< $(CCOUTPUTFLAG) $@ 

%$(OBJ_EXT): $(RELATIVE_PATH_TO_ANCHOR)/%.cpp
	$(CXX) -c $(CXXFLAGS) $< $(CCOUTPUTFLAG) $@ 

%$(OBJ_EXT): %.cpp
	$(CXX) -c $(CXXFLAGS) $< $(CCOUTPUTFLAG) $@ 

%$(OBJ_EXT): %.c
	$(CC) -c $(CFLAGS) $< $(CCOUTPUTFLAG) $@ 

%$(OBJ_EXT): $(TARGET_SRC_DIR)/%.cpp
	$(CXX) -c $(CXXFLAGS) $< $(CCOUTPUTFLAG) $@ 

%$(OBJ_EXT): $(TARGET_SRC_DIR)/%.c
	$(CC) -c $(CFLAGS) $< $(CCOUTPUTFLAG) $@ 

|>START_EXPAND_RULES<|%$(OBJ_EXT) : |>EXPAND_DIR_NAME<|/%.cpp
	$(CXX) -c $(CXXFLAGS) $<

|>END_EXPAND_RULES<|

|>START_EXPAND_RULES<|%$(OBJ_EXT) : |>EXPAND_DIR_NAME<|/%.c
	$(CC) -c $(CFLAGS) $<

|>END_EXPAND_RULES<|
