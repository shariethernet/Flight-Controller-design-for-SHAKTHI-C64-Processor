%% This code was developed as part of graduate coursework at Embry-Riddle Aeronautical University
%% under the guidance of Dr. Pat Anderson and Dr. Hever Moncayo.

%% Author: Robert F. Hartley
%% Assistant Developers: Francois Hugon, Brian DeRosa, and Christopher Carvalho
%% Support: apm2.simulink@gmail.com

%% Oct. 25, 2012
%% Version 1.0


%% File : Arduino_IMU_sfcn.tlc
%%

%implements Arduino_IMU_sfcn "C"


%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included. This is common to all APM2
  %% blocks.
  %if EXISTS("_DONE_SYSTEM_INC_BLOCK_TYPE_SETUP_") == 0
    %assign:: _DONE_SYSTEM_INC_BLOCK_TYPE_SETUP_ = 1
    %if (CompiledModel.TargetStyle!="SimulationTarget")
      %<LibAddToCommonIncludes("Simulink_APM2_Wrapper.h")>
    %endif
  %endif 

%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output

  %% Start up APM2 board. Common to all APM2 blocks. Must be included FIRST
  %if EXISTS("_DONE_SYSTEM_INIT_") == 0
     %assign :: _DONE_SYSTEM_INIT_ = 1
     /* APM2 System startup function. Required for any blocks. Inserted by:
     %<Type> (%<ParamSettings.FunctionName>): %<Name> */
     Simulink_APM2_Startup();
  %endif

    %% Start up the serial bus requested for debugging
    %% %if %<uart_val> == 1
    %%    %if EXISTS("_DONE_UART0_INIT_") == 0
    %%        %assign :: _DONE_UART0_INIT_ = 1
    %%        /* Using UART0 */
    %%        Serial_begin(115200);
    %%    %endif
    %%%else
    %%     %if EXISTS("_DONE_UART2_INIT_") == 0
    %%        %assign :: _DONE_UART2_INIT_ = 1
    %%        /* Using UART2 */
    %%        Serial3_begin(%<baud_val>);
    %%    %endif
    %%%endif

  
  %% Only insert the init once
  %if EXISTS("_DONE_IMU_INIT_") == 0
    %assign :: _DONE_IMU_INIT_ = 1
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    %% Get mask parameters
    %assign lpf_filt_freq_hz_val = LibBlockParameterValue(lpf_filt_freq_hz,0)
    %assign gyro_scale_val = LibBlockParameterValue(gyro_scale,0)
    %assign accel_scale_val = LibBlockParameterValue(accel_scale,0)
  
    /* Start up the IMU - Calibrated */
    imu_init(%<lpf_filt_freq_hz_val>,%<gyro_scale_val>,%<accel_scale_val>);
  
  %endif

  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

  %if (CompiledModel.TargetStyle!="SimulationTarget")  
    
    float imu_accel[3];
    float imu_gyro[3];
    float imu_temp;

    /* Stop the baro chip from holding the SPI bus */
    pinMode(40, OUTPUT);
    digitalWrite(40, HIGH);

    imu_update();
    imu_get_gyros(imu_gyro);
    imu_get_accels(imu_accel);
    imu_temp = imu_temperature();

    /* Degrees per second */
    %<LibBlockOutputSignal(0, "", "", 0)> = imu_gyro[0];
    %<LibBlockOutputSignal(1, "", "", 0)> = imu_gyro[1];
    %<LibBlockOutputSignal(2, "", "", 0)> = imu_gyro[2];
    
    /* G's */
    %<LibBlockOutputSignal(3, "", "", 0)> = imu_accel[0];
    %<LibBlockOutputSignal(4, "", "", 0)> = imu_accel[1];
    %<LibBlockOutputSignal(5, "", "", 0)> = -imu_accel[2];

    /* Deg C */
    %<LibBlockOutputSignal(6, "", "", 0)> = imu_temp;
  %endif

%endfunction

%% [EOF]
