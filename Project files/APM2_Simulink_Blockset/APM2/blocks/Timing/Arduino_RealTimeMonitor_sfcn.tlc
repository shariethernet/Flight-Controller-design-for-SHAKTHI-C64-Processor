%% This code was developed as part of graduate coursework at Embry-Riddle Aeronautical University
%% under the guidance of Dr. Pat Anderson and Dr. Hever Moncayo.

%% Author: Robert F. Hartley
%% Assistant Developers: Francois Hugon, Brian DeRosa, and Christopher Carvalho
%% Support: apm2.simulink@gmail.com

%% Oct. 25, 2012
%% Version 1.0



%% File : Arduino_RealTimeMonitor_sfcn.tlc
%%

%implements Arduino_RealTimeMonitor_sfcn "C"


%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup(block, system) void

  %% Ensure required header files are included. This is common to all APM2
  %% blocks.
  %if EXISTS("_DONE_SYSTEM_INC_BLOCK_TYPE_SETUP_") == 0
    %assign:: _DONE_SYSTEM_INC_BLOCK_TYPE_SETUP_ = 1
    %if (CompiledModel.TargetStyle!="SimulationTarget")
      %<LibAddToCommonIncludes("Simulink_APM2_Wrapper.h")>
    %endif
  %endif 

%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output

  %% Start up APM2 board. Common to all APM2 blocks.
  %if EXISTS("_DONE_SYSTEM_INIT_") == 0
     %assign :: _DONE_SYSTEM_INIT_ = 1
     /* APM2 System startup function. Required for any blocks. Inserted by:
     %<Type> (%<ParamSettings.FunctionName>): %<Name> */
     Simulink_APM2_Startup();
  %endif

  %% Only insert the init once
  %if EXISTS("_DONE_REALTIMEMONITOR_INIT_") == 0
    %assign :: _DONE_REALTIMEMONITOR_INIT_ = 1
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    
    %assign ts_val = LibBlockParameterValue(SampleTime,0)
    timestats_set_specified_frame_rate_ms((uint32_t)(%<ts_val> * 1000));
    timestats_mark();

  %endif

  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output

  %if (CompiledModel.TargetStyle!="SimulationTarget")  
    
    /* Check sample time. Allow a 1 ms tolerance on check. */
    if (timestats_get_delta_ms() > (timestats_get_specified_frame_rate_ms()+1))
        %<LibBlockOutputSignal(0, "", "", 0)> = (boolean_T)0;
    else
        %<LibBlockOutputSignal(0, "", "", 0)> = (boolean_T)1;

    /* Reset timer */
    timestats_mark();

  %endif

%endfunction

%% [EOF]
