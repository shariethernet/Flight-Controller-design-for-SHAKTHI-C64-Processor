%% File : linearInputBus.tlc
%% Created: Mon Dec  2 09:07:24 2013
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "linearInputBus.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  linearInputBus "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign hFileName = "linearInputBus_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"
    extern void linearInputBus_Outputs_wrapper_accel(const real_T *Actuators,
			const void *Environment, void *__EnvironmentBUS,
			const real_T *ActuatorsTrim,
			const real_T *AirDensityTrim,
			const real_T *AirTempTrim,
			const real_T *PressureTrim,
			const real_T *SpeedOfSoundTrim,
			const real_T *GravityNEDTrim,
			const real_T *MagneticFieldNEDTrim,
			real_T *y);
    #endif
    %closefile hFile

    %assign cFileName = "linearInputBus_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "linearInputBus_bus.h"
	void linearInputBus_Outputs_wrapper_accel(const real_T *Actuators,
			const void *Environment, void *__EnvironmentBUS,
			const real_T *ActuatorsTrim,
			const real_T *AirDensityTrim,
			const real_T *AirTempTrim,
			const real_T *PressureTrim,
			const real_T *SpeedOfSoundTrim,
			const real_T *GravityNEDTrim,
			const real_T *MagneticFieldNEDTrim,
			real_T *y){
	%assign dTypeId = LibBlockInputSignalDataTypeId(1)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(EnvironmentBus*) __EnvironmentBUS)", "(char *)Environment", 1)>
	linearInputBus_Outputs_wrapper(Actuators,
			(EnvironmentBus *) __EnvironmentBUS,
			ActuatorsTrim,
			AirDensityTrim,
			AirTempTrim,
			PressureTrim,
			SpeedOfSoundTrim,
			GravityNEDTrim,
			MagneticFieldNEDTrim,
			y);
}

   %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs
    
  extern void linearInputBus_Outputs_wrapper(const real_T *Actuators,
			const EnvironmentBus *Environment,
			const real_T *ActuatorsTrim,
			const real_T *AirDensityTrim,
			const real_T *AirTempTrim,
			const real_T *PressureTrim,
			const real_T *SpeedOfSoundTrim,
			const real_T *GravityNEDTrim,
			const real_T *MagneticFieldNEDTrim,
			real_T *y);
  %closefile externs
  %<LibCacheExtern(externs)>

 %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign u1BUS_ptr = LibBlockDWorkAddr(u1BUS, "", "", 0)
	linearInputBus_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<u1BUS_ptr>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<py0> );
  %else
	linearInputBus_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<py0> );
  %endif
  %%
%endfunction


%% [EOF] linearInputBus.tlc





